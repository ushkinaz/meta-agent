package ru.agent.beldum.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Image;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.ConceptPropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;

public class DiscardStrategy_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_bfzhdp_a(editorContext, node);
  }

  private EditorCell createCollection_bfzhdp_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_bfzhdp_a");
    editorCell.addEditorCell(this.createImage_bfzhdp_a0(editorContext, node));
    editorCell.addEditorCell(this.createIndentCell_bfzhdp_b0(editorContext, node));
    editorCell.addEditorCell(this.createConceptProperty_bfzhdp_c0(editorContext, node));
    return editorCell;
  }

  private EditorCell createImage_bfzhdp_a0(final EditorContext editorContext, final SNode node) {
    EditorCell_Image editorCell;
    {
      IOperationContext operationContext = editorContext.getOperationContext();
      Language language = node.getLanguage();
      String filename = MacrosFactory.languageDescriptor().expandPath("${language_descriptor}/local/database--minus.png", language.getDescriptorFile());
      editorCell = EditorCell_Image.createImageCell(editorContext, node, filename);
    }
    editorCell.setCellId("Image_bfzhdp_a0");
    editorCell.setDescent(0);
    return editorCell;
  }

  private EditorCell createIndentCell_bfzhdp_b0(EditorContext editorContext, SNode node) {
    EditorCell_Indent result = new EditorCell_Indent(editorContext, node);
    return result;
  }

  private EditorCell createConceptProperty_bfzhdp_c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new ConceptPropertyCellProvider(node, editorContext);
    provider.setRole("alias");
    provider.setNoTargetText("<no alias>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("conceptProperty_alias");
    GangmanStyle_StyleSheet.getLiteral(editorCell).apply(editorCell);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
}
