package ru.agent.beldum.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class BeanField_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:5d99f31f-3f67-472b-88a7-da8c6a678be9(ru.agent.beldum.constraints)", "7599577621034577701");

  public BeanField_Constraints() {
    super("ru.agent.beldum.structure.BeanField");
  }

  @Override
  public boolean hasOwnCanBeParentMethod() {
    return true;
  }

  @Override
  public boolean canBeParent(SNode node, @Nullable SNode childNode, SNode childConcept, SNode link, IOperationContext operationContext, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAParent(node, childNode, childConcept, link, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAParent(SNode node, SNode childNode, SNode childConcept, SNode link, final IOperationContext operationContext) {
    if (link == SLinkOperations.findLinkDeclaration("ru.agent.beldum.structure.BeanField", "propertyType")) {
      // TODO: No classes other than BeanDescriptor 
      if (SConceptOperations.isSubConceptOf(childConcept, "jetbrains.mps.baseLanguage.structure.PrimitiveType")) {
        return true;
      }
      if (SConceptOperations.isSubConceptOf(childConcept, "jetbrains.mps.baseLanguage.collections.structure.ListType")) {
        return true;
      }
      if (SConceptOperations.isSubConceptOf(childConcept, "jetbrains.mps.baseLanguage.collections.structure.MapType")) {
        return true;
      }
      if (SConceptOperations.isSubConceptOf(childConcept, "jetbrains.mps.baseLanguage.structure.StringType")) {
        return true;
      }

      // <node> 

      // No classes other than BeanDescriptor 
      if (SConceptOperations.isSubConceptOf(childConcept, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        return true;
      }
      return false;
    }
    return true;
  }
}
