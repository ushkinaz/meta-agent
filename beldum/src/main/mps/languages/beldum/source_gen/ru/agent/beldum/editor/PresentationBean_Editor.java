package ru.agent.beldum.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;

public class PresentationBean_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_i7niy9_a(editorContext, node);
  }

  public EditorCell createInspectedCell(EditorContext editorContext, SNode node) {
    return this.createComponent_i7niy9_a(editorContext, node);
  }

  private EditorCell createCollection_i7niy9_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_i7niy9_a");
    editorCell.addEditorCell(this.createComponent_i7niy9_a0(editorContext, node));
    editorCell.addEditorCell(this.createComponent_i7niy9_b0(editorContext, node));
    return editorCell;
  }

  private EditorCell createComponent_i7niy9_a0(EditorContext editorContext, SNode node) {
    AbstractCellProvider provider = new BeanDescriptor_header(node);
    EditorCell editorCell = provider.createEditorCell(editorContext);
    return editorCell;
  }

  private EditorCell createComponent_i7niy9_b0(EditorContext editorContext, SNode node) {
    AbstractCellProvider provider = new BeanFields_editor(node);
    EditorCell editorCell = provider.createEditorCell(editorContext);
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
      style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    }
    return editorCell;
  }

  private EditorCell createComponent_i7niy9_a(EditorContext editorContext, SNode node) {
    AbstractCellProvider provider = new DocumentationEditor_component(node);
    EditorCell editorCell = provider.createEditorCell(editorContext);
    return editorCell;
  }
}
