package ru.agent.beldum.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class BeanTransformation_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer canBeAncesctorBreakingPoint = new SNodePointer("r:5d99f31f-3f67-472b-88a7-da8c6a678be9(ru.agent.beldum.constraints)", "3965988441740426506");

  public BeanTransformation_Constraints() {
    super("ru.agent.beldum.structure.BeanTransformation");
  }

  @Override
  public boolean hasOwnCanBeAncestorMethod() {
    return true;
  }

  @Override
  public boolean canBeAncestor(SNode node, @Nullable SNode childNode, SNode childConcept, IOperationContext context, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAnAncestor(node, childNode, childConcept, context);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeAncesctorBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAnAncestor(SNode node, SNode childNode, SNode childConcept, final IOperationContext operationContext) {
    {
      SNode bean = childNode;
      if (SNodeOperations.isInstanceOf(bean, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        if (SNodeOperations.getContainingLinkDeclaration(bean) == SLinkOperations.findLinkDeclaration("ru.agent.beldum.structure.BeanTransformation", "transportBean")) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(bean, "classifier", false), "ru.agent.beldum.structure.TransportBean");
        } else if (SNodeOperations.getContainingLinkDeclaration(bean) == SLinkOperations.findLinkDeclaration("ru.agent.beldum.structure.BeanTransformation", "presentationBean")) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(bean, "classifier", false), "ru.agent.beldum.structure.PresentationBean");
        }
      }
    }
    return true;
  }
}
