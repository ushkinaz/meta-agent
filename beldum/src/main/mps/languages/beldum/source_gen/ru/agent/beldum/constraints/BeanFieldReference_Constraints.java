package ru.agent.beldum.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.SimpleRoleScope;

public class BeanFieldReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:5d99f31f-3f67-472b-88a7-da8c6a678be9(ru.agent.beldum.constraints)", "3965988441740199788");
  private static SNodePointer breakingNode_3q884c_a0a0a0a0a1a0b0a1a2 = new SNodePointer("r:5d99f31f-3f67-472b-88a7-da8c6a678be9(ru.agent.beldum.constraints)", "7323242700666134426");

  public BeanFieldReference_Constraints() {
    super("ru.agent.beldum.structure.BeanFieldReference");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("property", new BaseReferenceConstraintsDescriptor("property", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_3q884c_a0a0a0a0a1a0b0a1a2;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            // Source is TransportBean, target is PresentationBean 
            if (SNodeOperations.getAncestor(_context.getContextNode(), "ru.agent.beldum.structure.BeanTransformation", false, false) != null) {
              SNode bean;
              if (_context.getContainingLink() == SLinkOperations.findLinkDeclaration("ru.agent.beldum.structure.FieldTransformation", "source")) {
                bean = SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(), "ru.agent.beldum.structure.BeanTransformation", false, false), "transportBean", true), "classifier", false), "ru.agent.beldum.structure.BeanDescriptor");
              } else if (_context.getContainingLink() == SLinkOperations.findLinkDeclaration("ru.agent.beldum.structure.FieldTransformation", "target")) {
                bean = SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(), "ru.agent.beldum.structure.BeanTransformation", false, false), "presentationBean", true), "classifier", false), "ru.agent.beldum.structure.BeanDescriptor");
              } else {
                return null;
              }
              return SimpleRoleScope.forNamedElements(bean, SLinkOperations.findLinkDeclaration("ru.agent.beldum.structure.BeanDescriptor", "beanField"));
            }
            return null;
          }
        };
      }
    });
    return references;
  }

  public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(parentNode, "ru.agent.beldum.structure.FieldTransformation");
  }
}
